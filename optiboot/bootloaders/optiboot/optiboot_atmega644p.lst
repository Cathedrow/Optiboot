
optiboot_atmega644p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  0000fc00  0000fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000006a  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000283  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001ae  00000000  00000000  00000545  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003db  00000000  00000000  000006f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000140  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001d1  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000068  00000000  00000000  00000e71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <main>:
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    fc00:	85 e0       	ldi	r24, 0x05	; 5
    fc02:	80 93 81 00 	sts	0x0081, r24
#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
#endif
#ifndef SOFT_UART
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    fc06:	82 e0       	ldi	r24, 0x02	; 2
    fc08:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    fc0c:	88 e1       	ldi	r24, 0x18	; 24
    fc0e:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    fc12:	86 e0       	ldi	r24, 0x06	; 6
    fc14:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    fc18:	80 e1       	ldi	r24, 0x10	; 16
    fc1a:	80 93 c4 00 	sts	0x00C4, r24
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    fc1e:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    fc20:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    fc22:	81 ff       	sbrs	r24, 1
    fc24:	c8 d0       	rcall	.+400    	; 0xfdb6 <appStart>

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_500MS);
    fc26:	8d e0       	ldi	r24, 0x0D	; 13
    fc28:	c0 d0       	rcall	.+384    	; 0xfdaa <watchdogConfig>

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    fc2a:	20 9a       	sbi	0x04, 0	; 4
    fc2c:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc2e:	20 e3       	ldi	r18, 0x30	; 48
    fc30:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    fc32:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc34:	30 93 85 00 	sts	0x0085, r19
    fc38:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    fc3c:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    fc3e:	b0 9b       	sbis	0x16, 0	; 22
    fc40:	fe cf       	rjmp	.-4      	; 0xfc3e <main+0x3e>
    LED_PIN |= _BV(LED);
    fc42:	18 9a       	sbi	0x03, 0	; 3
  return getch();
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fc44:	a8 95       	wdr
    TCNT1 = -(F_CPU/(1024*16));
    TIFR1 = _BV(TOV1);
    while(!(TIFR1 & _BV(TOV1)));
    LED_PIN |= _BV(LED);
    watchdogReset();
  } while (--count);
    fc46:	81 50       	subi	r24, 0x01	; 1
    fc48:	a9 f7       	brne	.-22     	; 0xfc34 <main+0x34>
    /* get character from UART */
    ch = getch();

    if(ch == STK_GET_PARAMETER) {
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    fc4a:	dd 24       	eor	r13, r13
    fc4c:	d3 94       	inc	r13
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
        addrPtr += 2;
      } while (--ch);
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    fc4e:	a5 e0       	ldi	r26, 0x05	; 5
    fc50:	fa 2e       	mov	r15, r26
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    fc52:	f1 e1       	ldi	r31, 0x11	; 17
    fc54:	ef 2e       	mov	r14, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    fc56:	9c d0       	rcall	.+312    	; 0xfd90 <getch>

    if(ch == STK_GET_PARAMETER) {
    fc58:	81 34       	cpi	r24, 0x41	; 65
    fc5a:	21 f4       	brne	.+8      	; 0xfc64 <main+0x64>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    fc5c:	81 e0       	ldi	r24, 0x01	; 1
    fc5e:	b6 d0       	rcall	.+364    	; 0xfdcc <verifySpace+0xc>
      putch(0x03);
    fc60:	83 e0       	ldi	r24, 0x03	; 3
    fc62:	20 c0       	rjmp	.+64     	; 0xfca4 <main+0xa4>
    }
    else if(ch == STK_SET_DEVICE) {
    fc64:	82 34       	cpi	r24, 0x42	; 66
    fc66:	11 f4       	brne	.+4      	; 0xfc6c <main+0x6c>
      // SET DEVICE is ignored
      getNch(20);
    fc68:	84 e1       	ldi	r24, 0x14	; 20
    fc6a:	03 c0       	rjmp	.+6      	; 0xfc72 <main+0x72>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    fc6c:	85 34       	cpi	r24, 0x45	; 69
    fc6e:	19 f4       	brne	.+6      	; 0xfc76 <main+0x76>
      // SET DEVICE EXT is ignored
      getNch(5);
    fc70:	85 e0       	ldi	r24, 0x05	; 5
    fc72:	ac d0       	rcall	.+344    	; 0xfdcc <verifySpace+0xc>
    fc74:	82 c0       	rjmp	.+260    	; 0xfd7a <main+0x17a>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    fc76:	85 35       	cpi	r24, 0x55	; 85
    fc78:	81 f4       	brne	.+32     	; 0xfc9a <main+0x9a>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    fc7a:	8a d0       	rcall	.+276    	; 0xfd90 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    fc7c:	08 2f       	mov	r16, r24
    fc7e:	10 e0       	ldi	r17, 0x00	; 0
    fc80:	87 d0       	rcall	.+270    	; 0xfd90 <getch>
    fc82:	90 e0       	ldi	r25, 0x00	; 0
    fc84:	98 2f       	mov	r25, r24
    fc86:	88 27       	eor	r24, r24
    fc88:	80 2b       	or	r24, r16
    fc8a:	91 2b       	or	r25, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    fc8c:	88 0f       	add	r24, r24
    fc8e:	99 1f       	adc	r25, r25
      address = newAddress;
    fc90:	90 93 01 03 	sts	0x0301, r25
    fc94:	80 93 00 03 	sts	0x0300, r24
    fc98:	6f c0       	rjmp	.+222    	; 0xfd78 <main+0x178>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    fc9a:	86 35       	cpi	r24, 0x56	; 86
    fc9c:	29 f4       	brne	.+10     	; 0xfca8 <main+0xa8>
      // UNIVERSAL command is ignored
      getNch(4);
    fc9e:	84 e0       	ldi	r24, 0x04	; 4
    fca0:	95 d0       	rcall	.+298    	; 0xfdcc <verifySpace+0xc>
      putch(0x00);
    fca2:	80 e0       	ldi	r24, 0x00	; 0
    fca4:	6d d0       	rcall	.+218    	; 0xfd80 <putch>
    fca6:	69 c0       	rjmp	.+210    	; 0xfd7a <main+0x17a>
    }
    /* Write memory, length is big endian and is in bytes  */
    else if(ch == STK_PROG_PAGE) {
    fca8:	84 36       	cpi	r24, 0x64	; 100
    fcaa:	09 f0       	breq	.+2      	; 0xfcae <main+0xae>
    fcac:	3f c0       	rjmp	.+126    	; 0xfd2c <main+0x12c>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getLen();
    fcae:	78 d0       	rcall	.+240    	; 0xfda0 <getLen>

      // Immediately start page erase - this will 4.5ms
      __boot_page_erase_short((uint16_t)(void*)address);
    fcb0:	e0 91 00 03 	lds	r30, 0x0300
    fcb4:	f0 91 01 03 	lds	r31, 0x0301
    fcb8:	83 e0       	ldi	r24, 0x03	; 3
    fcba:	87 bf       	out	0x37, r24	; 55
    fcbc:	e8 95       	spm
    fcbe:	c0 e0       	ldi	r28, 0x00	; 0
    fcc0:	d1 e0       	ldi	r29, 0x01	; 1
      
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    fcc2:	66 d0       	rcall	.+204    	; 0xfd90 <getch>
    fcc4:	89 93       	st	Y+, r24
      while (--length);
    fcc6:	80 91 02 03 	lds	r24, 0x0302
    fcca:	81 50       	subi	r24, 0x01	; 1
    fccc:	80 93 02 03 	sts	0x0302, r24
    fcd0:	88 23       	and	r24, r24
    fcd2:	b9 f7       	brne	.-18     	; 0xfcc2 <main+0xc2>

      // Read command terminator, start reply
      verifySpace();
    fcd4:	75 d0       	rcall	.+234    	; 0xfdc0 <verifySpace>
      
      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    fcd6:	07 b6       	in	r0, 0x37	; 55
    fcd8:	00 fc       	sbrc	r0, 0
    fcda:	fd cf       	rjmp	.-6      	; 0xfcd6 <main+0xd6>
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
    fcdc:	40 91 00 03 	lds	r20, 0x0300
    fce0:	50 91 01 03 	lds	r21, 0x0301
    fce4:	a0 e0       	ldi	r26, 0x00	; 0
    fce6:	b1 e0       	ldi	r27, 0x01	; 1
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    fce8:	2c 91       	ld	r18, X
    fcea:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    fcec:	11 96       	adiw	r26, 0x01	; 1
    fcee:	8c 91       	ld	r24, X
    fcf0:	11 97       	sbiw	r26, 0x01	; 1
    fcf2:	90 e0       	ldi	r25, 0x00	; 0
    fcf4:	98 2f       	mov	r25, r24
    fcf6:	88 27       	eor	r24, r24
    fcf8:	82 2b       	or	r24, r18
    fcfa:	93 2b       	or	r25, r19
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    fcfc:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    fcfe:	fa 01       	movw	r30, r20
    fd00:	0c 01       	movw	r0, r24
    fd02:	d7 be       	out	0x37, r13	; 55
    fd04:	e8 95       	spm
    fd06:	11 24       	eor	r1, r1
        addrPtr += 2;
    fd08:	4e 5f       	subi	r20, 0xFE	; 254
    fd0a:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    fd0c:	f2 e0       	ldi	r31, 0x02	; 2
    fd0e:	a0 30       	cpi	r26, 0x00	; 0
    fd10:	bf 07       	cpc	r27, r31
    fd12:	51 f7       	brne	.-44     	; 0xfce8 <main+0xe8>
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    fd14:	e0 91 00 03 	lds	r30, 0x0300
    fd18:	f0 91 01 03 	lds	r31, 0x0301
    fd1c:	f7 be       	out	0x37, r15	; 55
    fd1e:	e8 95       	spm
      boot_spm_busy_wait();
    fd20:	07 b6       	in	r0, 0x37	; 55
    fd22:	00 fc       	sbrc	r0, 0
    fd24:	fd cf       	rjmp	.-6      	; 0xfd20 <main+0x120>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    fd26:	e7 be       	out	0x37, r14	; 55
    fd28:	e8 95       	spm
    fd2a:	27 c0       	rjmp	.+78     	; 0xfd7a <main+0x17a>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    fd2c:	84 37       	cpi	r24, 0x74	; 116
    fd2e:	b9 f4       	brne	.+46     	; 0xfd5e <main+0x15e>
      // READ PAGE - we only read flash
      getLen();
    fd30:	37 d0       	rcall	.+110    	; 0xfda0 <getLen>
      verifySpace();
    fd32:	46 d0       	rcall	.+140    	; 0xfdc0 <verifySpace>
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    fd34:	e0 91 00 03 	lds	r30, 0x0300
    fd38:	f0 91 01 03 	lds	r31, 0x0301
    fd3c:	31 96       	adiw	r30, 0x01	; 1
    fd3e:	f0 93 01 03 	sts	0x0301, r31
    fd42:	e0 93 00 03 	sts	0x0300, r30
    fd46:	31 97       	sbiw	r30, 0x01	; 1
    fd48:	e4 91       	lpm	r30, Z+
    fd4a:	8e 2f       	mov	r24, r30
    fd4c:	19 d0       	rcall	.+50     	; 0xfd80 <putch>
      while (--length);
    fd4e:	80 91 02 03 	lds	r24, 0x0302
    fd52:	81 50       	subi	r24, 0x01	; 1
    fd54:	80 93 02 03 	sts	0x0302, r24
    fd58:	88 23       	and	r24, r24
    fd5a:	61 f7       	brne	.-40     	; 0xfd34 <main+0x134>
    fd5c:	0e c0       	rjmp	.+28     	; 0xfd7a <main+0x17a>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    fd5e:	85 37       	cpi	r24, 0x75	; 117
    fd60:	39 f4       	brne	.+14     	; 0xfd70 <main+0x170>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    fd62:	2e d0       	rcall	.+92     	; 0xfdc0 <verifySpace>
      putch(SIGNATURE_0);
    fd64:	8e e1       	ldi	r24, 0x1E	; 30
    fd66:	0c d0       	rcall	.+24     	; 0xfd80 <putch>
      putch(SIGNATURE_1);
    fd68:	86 e9       	ldi	r24, 0x96	; 150
    fd6a:	0a d0       	rcall	.+20     	; 0xfd80 <putch>
      putch(SIGNATURE_2);
    fd6c:	8a e0       	ldi	r24, 0x0A	; 10
    fd6e:	9a cf       	rjmp	.-204    	; 0xfca4 <main+0xa4>
    }
    else if (ch == 'Q') {
    fd70:	81 35       	cpi	r24, 0x51	; 81
    fd72:	11 f4       	brne	.+4      	; 0xfd78 <main+0x178>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    fd74:	88 e0       	ldi	r24, 0x08	; 8
    fd76:	19 d0       	rcall	.+50     	; 0xfdaa <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    fd78:	23 d0       	rcall	.+70     	; 0xfdc0 <verifySpace>
    }
    putch(STK_OK);
    fd7a:	80 e1       	ldi	r24, 0x10	; 16
    fd7c:	01 d0       	rcall	.+2      	; 0xfd80 <putch>
    fd7e:	6b cf       	rjmp	.-298    	; 0xfc56 <main+0x56>

0000fd80 <putch>:
  }
}

void putch(char ch) {
    fd80:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    fd82:	80 91 c0 00 	lds	r24, 0x00C0
    fd86:	85 ff       	sbrs	r24, 5
    fd88:	fc cf       	rjmp	.-8      	; 0xfd82 <putch+0x2>
  UDR0 = ch;
    fd8a:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    fd8e:	08 95       	ret

0000fd90 <getch>:
  return getch();
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fd90:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)));
    fd92:	80 91 c0 00 	lds	r24, 0x00C0
    fd96:	87 ff       	sbrs	r24, 7
    fd98:	fc cf       	rjmp	.-8      	; 0xfd92 <getch+0x2>
  ch = UDR0;
    fd9a:	80 91 c6 00 	lds	r24, 0x00C6
#ifdef LED_DATA_FLASH
  LED_PIN |= _BV(LED);
#endif

  return ch;
}
    fd9e:	08 95       	ret

0000fda0 <getLen>:
  } while (--count);
}
#endif

uint8_t getLen() {
  getch();
    fda0:	f7 df       	rcall	.-18     	; 0xfd90 <getch>
  length = getch();
    fda2:	f6 df       	rcall	.-20     	; 0xfd90 <getch>
    fda4:	80 93 02 03 	sts	0x0302, r24
  return getch();
}
    fda8:	f3 cf       	rjmp	.-26     	; 0xfd90 <getch>

0000fdaa <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fdaa:	e0 e6       	ldi	r30, 0x60	; 96
    fdac:	f0 e0       	ldi	r31, 0x00	; 0
    fdae:	98 e1       	ldi	r25, 0x18	; 24
    fdb0:	90 83       	st	Z, r25
  WDTCSR = x;
    fdb2:	80 83       	st	Z, r24
}
    fdb4:	08 95       	ret

0000fdb6 <appStart>:

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    fdb6:	80 e0       	ldi	r24, 0x00	; 0
    fdb8:	f8 df       	rcall	.-16     	; 0xfdaa <watchdogConfig>
  __asm__ __volatile__ (
    fdba:	ee 27       	eor	r30, r30
    fdbc:	ff 27       	eor	r31, r31
    fdbe:	09 94       	ijmp

0000fdc0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) appStart();
    fdc0:	e7 df       	rcall	.-50     	; 0xfd90 <getch>
    fdc2:	80 32       	cpi	r24, 0x20	; 32
    fdc4:	09 f0       	breq	.+2      	; 0xfdc8 <verifySpace+0x8>
    fdc6:	f7 df       	rcall	.-18     	; 0xfdb6 <appStart>
  putch(STK_INSYNC);
    fdc8:	84 e1       	ldi	r24, 0x14	; 20
}
    fdca:	da cf       	rjmp	.-76     	; 0xfd80 <putch>
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fdcc:	1f 93       	push	r17
    fdce:	18 2f       	mov	r17, r24

0000fdd0 <getNch>:
  do getch(); while (--count);
    fdd0:	df df       	rcall	.-66     	; 0xfd90 <getch>
    fdd2:	11 50       	subi	r17, 0x01	; 1
    fdd4:	e9 f7       	brne	.-6      	; 0xfdd0 <getNch>
  verifySpace();
    fdd6:	f4 df       	rcall	.-24     	; 0xfdc0 <verifySpace>
}
    fdd8:	1f 91       	pop	r17
    fdda:	08 95       	ret
